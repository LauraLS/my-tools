---
import Counter from '@/components/counter.astro'
import Star from '@/components/icons/star.astro'
import MultiStar from '@/components/icons/multi-star.astro'
import Bolt from '@/components/icons/bolt.astro'
---

<section class="relative max-w-[1120px] mx-auto mt-28">
  <header class="flex flex-wrap justify-center gap-10 mb-10 pt-2">
    <Counter id="counter-characters-minute" text="Chars/min" />
    <Counter id="counter-words-minute" text="Words/min" />
    <Counter id="counter-write-characters" text="Write" />
    <Counter id="counter-right-characters" text="Right" />
    <Counter id="counter-wrong-characters" text="Wrong" />
  </header>
  <div class="bg-white rounded-xl p-4 shadow shadow-black/10">
    <p id="read-text" class="text-3xl font-open-sans tracking-widest leading-normal text-pretty font-medium">
      La mecanografía es una habilidad fundamental en el mundo digital actual. Dominar la técnica de escribir con
      rapidez y precisión puede marcar la diferencia en tu productividad y eficiencia.
    </p>
  </div>
  <div id="blur-layer" class="absolute inset-0 w-full h-full flex justify-center items-center backdrop-blur-sm">
    <button
      id="initial-test"
      class="bg-violet-500 text-2xl px-4 py-2 rounded shadow shadow-violet-500/90 hover:scale-105 transition text-black font-semibold"
      >Iniciar prueba</button
    >
  </div>
  <div
    id="result-layer"
    class="absolute inset-0 w-full h-full backdrop-blur-md hidden flex-col justify-center items-center gap-6"
  >
    <p class="text-5xl font-bold">Ejercicio finalizado</p>
    <div class="flex justify-center items-start gap-12 text-center">
      <div id="first-star" class="text-gray-400 w-36">
        <Star class="w-full" />
        <p class="font-bold">Menos de 2 errores</p>
      </div>
      <div id="second-star" class="text-gray-400 w-36">
        <MultiStar class="w-full" />
        <p class="font-bold">Test Sin errores</p>
      </div>
      <div id="third-star" class="text-gray-400 w-36">
        <Bolt class="w-full" />
        <p class="font-bold">La velocidad con 21 PPM</p>
      </div>
    </div>
    <button
      id="reset-test"
      class="bg-violet-500 text-2xl px-4 py-2 rounded shadow shadow-violet-500/90 hover:scale-105 transition text-black font-semibold"
      >Repetir prueba</button
    >
  </div>
  <label class="absolute">
    <input
      id="input-text"
      type="text"
      aria-label="Text"
      autocomplete="off"
      autocapitalize="off"
      inputmode="text"
      autocorrect="off"
      spellcheck="false"
      class="opacity-0"
    />
  </label>
</section>

<style>
  #result-layer .star {
    color: rgb(253 224 71);
    & p {
      color: rgb(139 92 246);
    }
  }
</style>

<script>
  let startCurrentTime = 0
  let countCharacters = 0
  let countWords = 0
  let rightCharacters = 0
  let wrongCharacters = 0
  let charactersMinute = 0
  let wordsMinute = 0
  let spanElements: HTMLSpanElement[] = []

  const buttonInitialTest = document.getElementById('initial-test') as HTMLElement
  const buttonResetTest = document.getElementById('reset-test') as HTMLElement
  const blurLayer = document.getElementById('blur-layer') as HTMLElement
  const resultLayer = document.getElementById('result-layer') as HTMLElement
  const inputText = document.getElementById('input-text') as HTMLElement
  const counterCharactersMinute = document.getElementById('counter-characters-minute') as HTMLElement
  const counterWordsMinute = document.getElementById('counter-words-minute') as HTMLElement
  const counterWriteCharacters = document.getElementById('counter-write-characters') as HTMLElement
  const counterRightCharacters = document.getElementById('counter-right-characters') as HTMLElement
  const counterWrongCharacters = document.getElementById('counter-wrong-characters') as HTMLElement
  const resultFirstStar = document.getElementById('first-star') as HTMLElement
  const resultSecondStar = document.getElementById('second-star') as HTMLElement
  const resultThirdStar = document.getElementById('third-star') as HTMLElement

  buttonInitialTest.addEventListener('click', runTest)
  buttonResetTest.addEventListener('click', runTest)

  const txt =
    'It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout'
  // const txt = 'La mecanografía'

  function runTest(): void {
    initialGame()
    updateScore()
  }

  function initialGame(): void {
    startCurrentTime = 0
    countCharacters = 0
    countWords = 0
    rightCharacters = 0
    wrongCharacters = 0
    charactersMinute = 0
    wordsMinute = 0
    spanElements = Array.from(txt).map((character) => {
      const element = document.createElement('span')
      element.innerText = character
      return element
    })
    const readText = document.getElementById('read-text') as HTMLElement

    readText.innerHTML = ''
    readText.append(...spanElements)
    inputText.focus()
    blurLayer.style.display = 'none'
    resultLayer.style.display = 'none'
    inputText.addEventListener('keydown', keyDownListener)
  }

  function keyDownListener(event: KeyboardEvent): void {
    if (startWithWrongCharacter(event.key)) return
    if (isFirstCharacter()) startCurrentTime = new Date().valueOf() / 1000
    if (!ensureValidCharacter(event.key)) return

    if (isRightTyping(event.key)) {
      spanElements[countCharacters].classList.remove('bg-red-500')
      spanElements[countCharacters].classList.add('text-violet-600')
      rightCharacters += 1
      countCharacters += 1
      if (wasCompletedWord(event.key)) countWords += 1
      charactersMinute = Math.round((60 * rightCharacters) / (new Date().valueOf() / 1000 - startCurrentTime))
      wordsMinute = Math.round((60 * countWords) / (new Date().valueOf() / 1000 - startCurrentTime))
    } else {
      spanElements[countCharacters].classList.add('bg-red-500', 'transition', 'duration-200')
      setTimeout(() => {
        spanElements[countCharacters].classList.remove('bg-red-500')
      }, 200)
      wrongCharacters += 1
    }

    updateScore()

    if (spanElements.length === countCharacters) finishGame()
  }

  function finishGame(): void {
    wrongCharacters <= 2 ? resultFirstStar.classList.add('star') : resultFirstStar.classList.remove('star')
    wrongCharacters === 0 ? resultSecondStar.classList.add('star') : resultSecondStar.classList.remove('star')
    wordsMinute > 21 ? resultThirdStar.classList.add('star') : resultThirdStar.classList.remove('star')

    inputText.blur()
    resultLayer.style.display = 'flex'
    inputText.removeEventListener('keydown', keyDownListener)
  }

  function updateScore() {
    counterCharactersMinute.innerText = isValidNumber(charactersMinute) ? charactersMinute.toString() : '0'
    counterWordsMinute.innerText = isValidNumber(wordsMinute) ? wordsMinute.toString() : '0'
    counterRightCharacters.innerText = rightCharacters.toString()
    counterWriteCharacters.innerText = countCharacters.toString()
    counterWrongCharacters.innerText = wrongCharacters.toString()
  }

  function wasCompletedWord(key: string): boolean {
    return key === ' ' || spanElements.length === countCharacters
  }

  function isFirstCharacter(): boolean {
    return countCharacters === 0
  }

  function ensureValidCharacter(key: string): boolean {
    return key.length === 1
  }

  function isRightTyping(key: string): boolean {
    return key === spanElements[countCharacters].innerText
  }

  function startWithWrongCharacter(key: string): boolean {
    return isFirstCharacter() && key !== spanElements[countCharacters].innerText
  }

  function isValidNumber(number: number): boolean {
    return typeof number === 'number' && !isNaN(number) && number !== Infinity
  }
</script>
